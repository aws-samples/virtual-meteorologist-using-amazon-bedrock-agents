AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for deploying Cognito User Pool, Identity Pool, Amazon Bedrock Agents, 3 Lambda Functions and 3 Action Groups with API Schemas'

Parameters:
  FoundationModel:
    Type: String
    Description: 'The Amazon Bedrock Foundation Model to use for the agent'
    AllowedValues:
      - anthropic.claude-3-5-sonnet-20240620-v1:0
    Default: anthropic.claude-3-5-sonnet-20240620-v1:0
    ConstraintDescription: 'Must be anthropic.claude-3-5-sonnet-20240620-v1:0'
  UserEmail:
    Type: String
    Description: 'Email address for the test user. Must be a valid email address'
    AllowedPattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    ConstraintDescription: 'Must be a valid email address'

Resources:
  # Lambda Function 1: geo-coordinates
  GeoCoordinates:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: geo-coordinates
      Handler: index.handler
      Role: !GetAtt GeoCoordinatesRole.Arn
      Runtime: nodejs20.x
      Code:
        ZipFile: |
          const https = require('https');

          const buildPath = (baseUrl,input) => {
            let path = baseUrl;

            // Set default values in case of missing parameters
            const baseParams = {
              count: 50,
            };

            // Iterate through parameters
            input.parameters.forEach((param) => {
              if(param.name !== 'count'){
                  baseParams[param.name] = param.value.replace(new RegExp('"', 'g'), "") || baseParams[param.name];
              }
            });

            // Dynamically build querystring parameters
            const defaultParams = Object.entries(baseParams)
              .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)
              .join('&');

            path += `?${defaultParams}`;

            return path;
          }

          exports.handler = async (event, context) => {
              console.log('event: ', event);
              let action_response = {
                  'actionGroup': event.actionGroup,
                  'apiPath': event.apiPath,
                  'httpMethod': event.httpMethod,
                  'httpStatusCode': 200,
                  'responseBody': null
              }
              
              if(!event || !event.parameters || !Array.isArray(event.parameters) || event.parameters.length < 1){
                  action_response.responseBody = 'Required parameters are missing in the request, the following were provided: ' + JSON.stringify(event.parameters);
                  action_response.httpStatusCode = 400;
                  return {response : action_response}
              }
              
              try {
                  const body = await new Promise((resolve, reject) => {
                      const options = {
                          'method': 'GET',
                          'hostname': 'geocoding-api.open-meteo.com',
                          'path': buildPath('/v1/search',event),
                          'headers': {}
                      }
                      
                      const req = https.request(options, (res) => {
                          let body = '';
                          res.setEncoding('utf8');
                          res.on('data', (chunk) => body += chunk);
                          res.on('end', () => resolve(body));
                      });

                      req.on('error', reject);
                      req.end();
                  });

                  let api_response = {
                      'application/json': {
                          'body': {
                              'response': body
                          }
                      }
                  }

                  if(typeof(JSON.parse(body).results) === 'undefined'){
                      api_response['application/json'].body.response = 'No city name matched with the name provided. Try again by splitting the name and/or increasing the count parameter to get more results';
                  }

                  console.log('Successfully processed HTTPS response');

                  action_response.responseBody = api_response;
                  
                  let response = {response: action_response};
                  console.log('return: ', JSON.stringify(response, null, 2));
                  return response

              } catch (error) {
                  console.error('Error:', error);
                  throw error; // Rethrow the error for AWS Lambda to handle
              }
          };
      Description: 'Lambda function for geo-coordinates using Node.js 20'
      Timeout: 10
      MemorySize: 128

  GeoCoordinatesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaLogsPolicy1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/geo-coordinates:*'

  # Lambda Function 2: weather
  Weather:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: weather
      Handler: index.handler
      Role: !GetAtt WeatherRole.Arn
      Runtime: nodejs20.x
      Code:
        ZipFile: |
          const https = require('https');

          const buildPath = (baseUrl,input) => {
            let path = baseUrl;

            // Set default values in case of missing parameters
            const baseParams = {
              current: 'temperature_2m,relative_humidity_2m,apparent_temperature,is_day,precipitation,rain,showers,snowfall,weather_code,cloud_cover,wind_speed_10m,wind_direction_10m,wind_gusts_10m',
              hourly: 'temperature_2m,wind_speed_10m,cloud_cover,precipitation_probability,snowfall,snow_depth',
              daily: 'weather_code,temperature_2m_max,temperature_2m_min,uv_index_max,precipitation_sum,rain_sum,snowfall_sum'
            };

            // Iterate through parameters
            input.parameters.forEach((param) => {
              baseParams[param.name] = param.value.replace(new RegExp('"', 'g'), "") || baseParams[param.name];
            });

            // Dynamically build querystring parameters
            const defaultParams = Object.entries(baseParams)
              .map(([key, value]) => `${key}=${value}`)
              .join('&');
            path += `?${defaultParams}`;

            return path;
          }

          exports.handler = async (event, context) => {
              console.log('event: ', event);
              let action_response = {
                  'actionGroup': event.actionGroup,
                  'apiPath': event.apiPath,
                  'httpMethod': event.httpMethod,
                  'httpStatusCode': 200,
                  'responseBody': null
              }
              
              if(!event || !event.parameters || !Array.isArray(event.parameters) || event.parameters.length < 2){
                  action_response.responseBody = 'Required parameters are missing in the request, the following were provided: ' + JSON.stringify(event.parameters);
                  action_response.httpStatusCode = 400;
                  return {response : action_response}
              }
              
              try {
                  const body = await new Promise((resolve, reject) => {
                      const options = {
                          'method': 'GET',
                          'hostname': 'api.open-meteo.com',
                          'path': buildPath('/v1/forecast',event),
                          'headers': {}
                      }
                      
                      const req = https.request(options, (res) => {
                          let body = '';
                          res.setEncoding('utf8');
                          res.on('data', (chunk) => body += chunk);
                          res.on('end', () => resolve(body));
                      });

                      req.on('error', reject);
                      req.end();
                  });
                  
                  let api_response = {
                      'application/json': {
                          'body': {
                              'response': body
                          }
                      }
                  }

                  console.log('Successfully processed HTTPS response');

                  action_response.responseBody = api_response;
                  
                  let response = {response: action_response};
                  console.log('return: ', JSON.stringify(response, null, 2));
                  return response

              } catch (error) {
                  console.error('Error:', error);
                  throw error; // Rethrow the error for AWS Lambda to handle
              }
          };
      Description: 'Lambda function for weather using Node.js 20'
      Timeout: 10
      MemorySize: 128

  WeatherRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaLogsPolicy2
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/weather:*'

  # Lambda Function 3: date-time
  DateTime:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: date-time
      Handler: index.handler
      Role: !GetAtt DateTimeRole.Arn
      Runtime: nodejs20.x
      Code:
        ZipFile: |
          const getCurrentTime = (timezone) => {
              const options = {
                  timeZone: timezone,
                  year: 'numeric', month: '2-digit', day: '2-digit',
                  hour: '2-digit', minute: '2-digit', second: '2-digit',
                  timeZoneName: 'short'
              };

              const formattedTime = new Date().toLocaleString('en-US', options);
              return formattedTime;
          };

          const getParameterByName = (parameters_list, name) => {
              const result = parameters_list.find(obj => obj.name === name);
              return result || {value: 'UTC'}; // Return null if the object is not found
          }

          exports.handler = async (event) => {
              console.log('event:', event);
              // Structure of the response for the Bedrock Agent
              let action_response = {
                  'actionGroup': event.actionGroup,
                  'apiPath': event.apiPath,
                  'httpMethod': event.httpMethod,
                  'httpStatusCode': 200,
                  'responseBody': null
              }

            try {
                // Get the current time in the specified timezone
                const currentTime = getCurrentTime(getParameterByName(event.parameters || [],'timezone').value);
                let api_response = {
                    'application/json': {
                        'body': {
                            'response': JSON.stringify({current_date_time: currentTime})
                        }
                    }
                }
                // Return the response in a way that Bedrock agent will understand it
                action_response.responseBody = api_response;
                let response = {response: action_response};
                console.log('return: ', JSON.stringify(response, null, 2));
                return response
            } catch (error) {
                return {
                    statusCode: 500,
                    body: `Error: ${error.message}`
                };
            }
          };
      Description: 'Lambda function for date-time using Node.js 20'
      Timeout: 10
      MemorySize: 128

  DateTimeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaLogsPolicy3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/date-time:*'

  BedrockAgentExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BedrockAgentCustomPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AmazonBedrockAgentBedrockFoundationModelPolicyProd
                Effect: Allow
                Action: bedrock:InvokeModel
                Resource:
                  - !Sub 'arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/${FoundationModel}'

  BedrockAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: virtual-meteorologist
      Description: You are an AI weather assistant.
      Instruction: You are an AI trained to provide weather information. Your task number one is to become aware of the current time and date using the tool provided. With that in consideration, use it to calculate time range depending on the user query and to avoid asking dates if the user input contains for example "Yesterday, Today, Tomorrow or Next 4 days". Your answer must be clear and informative. Based on the information obtained from your tools, kindly suggest other possible things that the human might be interested in. The tools available are going to help you find out the latitude and longitude coordinates based on the city, county, country or area name provided by the human. Make sure to capture the city name correctly and use the current date along with the time range or specific date provided by the human to provide the forecast or past weather information. "current" contains the current temperature for the location within the coordinates "hourly.time" is an array of dates and hours. The following are arrays of data directly related to "hourly.time" index. "temperature_2m", "relative_humidity_2m", "wind_speed_10m", "apparent_temperature", "cloud_cover", "precipitation_probability". Add emojis as a part of the response.
      AutoPrepare: true
      AgentResourceRoleArn: !GetAtt BedrockAgentExecutionRole.Arn
      IdleSessionTTLInSeconds: 1800
      FoundationModel: !Ref FoundationModel
      ActionGroups:
        - ActionGroupName: obtain-latitude-longitude-from-place-name
          Description: This action group can query a geocoding API to translate location or places names into latitude and longitude coordinates to be used to obtain the weather information from coordinates.
          ActionGroupExecutor: 
            Lambda: !GetAtt GeoCoordinates.Arn
          ApiSchema: 
            Payload: |
              {
                "openapi": "3.0.0",
                "info": {
                  "title": "Geocoding API",
                  "version": "1.0.0",
                  "description": "API for geocoding location information"
                },
                "paths": {
                  "/v1/search": {
                    "description": "This API will help to search for specific information about a location by its name, such as as latitude, longitude, timezone and demographic data",
                    "get": {
                      "operationId": "get_v1_search",
                      "description": "Search for a location",
                      "parameters": [
                        {
                          "name": "name",
                          "in": "query",
                          "description": "Name of the location",
                          "required": true,
                          "schema": {
                            "type": "string"
                          }
                        },
                        {
                          "name": "count",
                          "in": "query",
                          "description": "Number of results to return",
                          "required": false,
                          "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "default": 1
                          }
                        }
                      ],
                      "responses": {
                        "200": {
                          "description": "Successful response",
                          "content": {
                            "application/json": {
                              "example": {
                                "results": [
                                  {
                                    "id": 4719457,
                                    "name": "Plano",
                                    "latitude": 33.01984,
                                    "longitude": -96.69889,
                                    "elevation": 203.0,
                                    "feature_code": "PPL",
                                    "country_code": "US",
                                    "admin1_id": 4736286,
                                    "admin2_id": 4682500,
                                    "timezone": "America/Chicago",
                                    "population": 283558,
                                    "postcodes": [
                                      "75023",
                                      "75024",
                                      "75025",
                                      "75026",
                                      "75074",
                                      "75075",
                                      "75086",
                                      "75093",
                                      "75094"
                                    ],
                                    "country_id": 6252001,
                                    "country": "United States",
                                    "admin1": "Texas",
                                    "admin2": "Collin"
                                  }
                                ],
                                "generationtime_ms": 0.50604343
                              },
                              "schema": {
                                "type": "object",
                                "properties": {
                                  "results": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "id": { "type": "integer" },
                                        "name": { "type": "string" },
                                        "latitude": { "type": "number" },
                                        "longitude": { "type": "number" },
                                        "elevation": { "type": "number" },
                                        "feature_code": { "type": "string" },
                                        "country_code": { "type": "string" },
                                        "admin1_id": { "type": "integer" },
                                        "admin2_id": { "type": "integer" },
                                        "timezone": { "type": "string" },
                                        "population": { "type": "integer" },
                                        "postcodes": { "type": "array", "items": { "type": "string" } },
                                        "country_id": { "type": "integer" },
                                        "country": { "type": "string" },
                                        "admin1": { "type": "string" },
                                        "admin2": { "type": "string" }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "latitude",
                                        "longitude",
                                        "elevation",
                                        "feature_code",
                                        "country_code",
                                        "admin1_id",
                                        "admin2_id",
                                        "timezone",
                                        "population",
                                        "postcodes",
                                        "country_id",
                                        "country",
                                        "admin1",
                                        "admin2"
                                      ]
                                    }
                                  },
                                  "generationtime_ms": { "type": "number" }
                                },
                                "required": ["results", "generationtime_ms"]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
        - ActionGroupName: obtain-weather-information-with-coordinates
          Description: This action group can query weather information using latitude and longitude geolocation coordinates. The result will be explained to the customer.
          ActionGroupExecutor: 
            Lambda: !GetAtt Weather.Arn
          ApiSchema: 
            Payload: |
              openapi: 3.0.0
              info:
                title: Open-Meteo APIs
                description: 'Open-Meteo offers free weather forecast APIs for open-source developers and non-commercial use. No API key is required.'
                version: '1.0'
                contact:
                  name: Open-Meteo
                  url: https://open-meteo.com
                  email: info@open-meteo.com
                license:
                  name: Attribution 4.0 International (CC BY 4.0)
                  url: https://creativecommons.org/licenses/by/4.0/
                termsOfService: https://open-meteo.com/en/features#terms
              paths:
                /v1/forecast:
                  servers:
                    - url: https://api.open-meteo.com
                  get:
                    operationId: get_forecast
                    tags:
                    - Weather Forecast APIs
                    summary: 7 day weather forecast for coordinates
                    description: 7 day weather variables in hourly and daily resolution for given WGS84 latitude and longitude coordinates. Available worldwide.
                    parameters:
                    - name: hourly
                      description: Contains a list of dates, each of them with hour granularity directly related to the values requested for the forecast. the hourly parameter expects a comma-separated string rather than an array, the example should be a single string value
                      in: query
                      example: temperature_2m,wind_speed_10m,cloud_cover,precipitation_probability
                      explode: false
                      schema:
                        type: array
                        items:
                          type: string
                          enum:
                          - temperature_2m
                          - relative_humidity_2m
                          - dew_point_2m
                          - apparent_temperature
                          - pressure_msl
                          - cloud_cover
                          - cloud_cover_low
                          - cloud_cover_mid
                          - cloud_cover_high
                          - wind_speed_10m
                          - wind_speed_80m
                          - wind_speed_120m
                          - wind_speed_180m
                          - wind_direction_10m
                          - wind_direction_80m
                          - wind_direction_120m
                          - wind_direction_180m
                          - wind_gusts_10m
                          - shortwave_radiation
                          - direct_radiation
                          - direct_normal_irradiance
                          - diffuse_radiation
                          - vapour_pressure_deficit
                          - evapotranspiration
                          - precipitation
                          - weather_code
                          - snow_height
                          - freezing_level_height
                          - soil_temperature_0cm
                          - soil_temperature_6cm
                          - soil_temperature_18cm
                          - soil_temperature_54cm
                          - soil_moisture_0_1cm
                          - soil_moisture_1_3cm
                          - soil_moisture_3_9cm
                          - soil_moisture_9_27cm
                          - soil_moisture_27_81cm
                    - name: daily
                      description: Contains a list of dates with day granularity directly related to the values requested for the forecast
                      in: query
                      schema:
                        type: array
                        items:
                          type: string
                          enum:
                          - temperature_2m_max
                          - temperature_2m_min
                          - apparent_temperature_max
                          - apparent_temperature_min
                          - precipitation_sum
                          - precipitation_hours
                          - weather_code
                          - sunrise
                          - sunset
                          - wind_speed_10m_max
                          - wind_gusts_10m_max
                          - wind_direction_10m_dominant
                          - shortwave_radiation_sum
                          - uv_index_max
                          - uv_index_clear_sky_max
                          - et0_fao_evapotranspiration
                    - name: latitude
                      in: query
                      required: true
                      description: "WGS84 coordinate"
                      schema:
                        type: number
                        format: float
                    - name: longitude
                      in: query
                      required: true
                      description: "WGS84 coordinate"
                      schema:
                        type: number
                        format: float
                    - name: start_date
                      in: query
                      description: "Date from when the weather should be queried and returned, the format is YYYY-MM-dd"
                      schema:
                        type: string
                        format: date
                    - name: end_date
                      in: query
                      description: "Date up to when the weather should be queried and returned, if future date is provided, then the forecast will be returned, the format for this parameter is YYYY-MM-dd"
                      schema:
                        type: string
                        format: date
                    - name: current_weather
                      description: Contains the weather values requested for the current date and hour
                      in: query
                      schema:
                        type: boolean
                    - name: temperature_unit
                      description: Contains the measure unit in which the temperature is returned
                      in: query
                      schema:
                        type: string
                        default: celsius
                        enum:
                        - celsius
                        - fahrenheit
                    - name: wind_speed_unit
                      description: Contains the measure unit in which the wind speed is returned
                      in: query
                      schema:
                        type: string
                        default: kmh
                        enum:
                        - kmh
                        - ms
                        - mph
                        - kn
                    - name: timeformat
                      in: query
                      description: If format `unixtime` is selected, all time values are returned in UNIX epoch time in seconds. Please not that all time is then in GMT+0! For daily values with unix timestamp, please apply `utc_offset_seconds` again to get the correct date.
                      schema:
                        type: string
                        default: iso8601
                        enum:
                        - iso8601
                        - unixtime
                    - name: timezone
                      in: query
                      description: If `timezone` is set, all timestamps are returned as local-time and data is returned starting at 0:00 local-time. Any time zone name from the [time zone database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) is supported.
                      schema:
                        type: string
                    - name: past_days
                      in: query
                      description: If `past_days` is set, yesterdays or the day before yesterdays data are also returned.
                      schema:
                        type: integer
                        enum:
                        - 1
                        - 2
                    responses:
                      200:
                        description: OK
                        content:
                          application/json:
                            schema:
                              type: object
                              properties:
                                latitude:
                                  type: number
                                  example: 52.52
                                  description: WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be up to 5 km away.
                                longitude:
                                  type: number
                                  example: 13.419.52
                                  description: WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be up to 5 km away.
                                elevation:
                                  type: number
                                  example: 44.812
                                  description: The elevation in meters of the selected weather grid-cell. In mountain terrain it might differ from the location you would expect.
                                generationtime_ms:
                                  type: number
                                  example: 2.2119
                                  description: Generation time of the weather forecast in milli seconds. This is mainly used for performance monitoring and improvements.
                                utc_offset_seconds:
                                  type: integer
                                  example: 3600
                                  description: Applied timezone offset from the &timezone= parameter.
                                hourly:
                                  $ref: '#/components/schemas/HourlyResponse'
                                hourly_units:
                                  type: object
                                  additionalProperties:
                                    type: string
                                  description: For each selected weather variable, the unit will be listed here.
                                daily:
                                  $ref: '#/components/schemas/DailyResponse'
                                daily_units:
                                  type: object
                                  additionalProperties:
                                    type: string
                                  description: For each selected daily weather variable, the unit will be listed here.
                                current_weather:
                                  $ref: '#/components/schemas/CurrentWeather'
                      400:
                        description: Bad Request
                        content:
                          application/json:
                            schema:
                              type: object
                              properties:
                                error:
                                  type: boolean
                                  description: Always set true for errors
                                reason:
                                  type: string
                                  description: Description of the error
                                  example: "Latitude must be in range of -90 to 90°. Given: 300"
              components:
                schemas:
                  HourlyResponse:
                    type: object
                    required:
                      - time
                    properties:
                      time:
                        type: array
                        items:
                          type: string
                      temperature_2m:
                        type: array
                        items:
                          type: number
                      relative_humidity_2m:
                        type: array
                        items:
                          type: number
                      dew_point_2m:
                        type: array
                        items:
                          type: number
                      apparent_temperature:
                        type: array
                        items:
                          type: number
                      pressure_msl:
                        type: array
                        items:
                          type: number
                      cloud_cover:
                        type: array
                        items:
                          type: number
                      cloud_cover_low:
                        type: array
                        items:
                          type: number
                      cloud_cover_mid:
                        type: array
                        items:
                          type: number
                      cloud_cover_high:
                        type: array
                        items:
                          type: number
                      wind_speed_10m:
                        type: array
                        items:
                          type: number
                      wind_speed_80m:
                        type: array
                        items:
                          type: number
                      wind_speed_120m:
                        type: array
                        items:
                          type: number
                      wind_speed_180m:
                        type: array
                        items:
                          type: number
                      wind_direction_10m:
                        type: array
                        items:
                          type: number
                      wind_direction_80m:
                        type: array
                        items:
                          type: number
                      wind_direction_120m:
                        type: array
                        items:
                          type: number
                      wind_direction_180m:
                        type: array
                        items:
                          type: number
                      wind_gusts_10m:
                        type: array
                        items:
                          type: number
                      shortwave_radiation:
                        type: array
                        items:
                          type: number
                      direct_radiation:
                        type: array
                        items:
                          type: number
                      direct_normal_irradiance:
                        type: array
                        items:
                          type: number
                      diffuse_radiation:
                        type: array
                        items:
                          type: number
                      vapour_pressure_deficit:
                        type: array
                        items:
                          type: number
                      evapotranspiration:
                        type: array
                        items:
                          type: number
                      precipitation:
                        type: array
                        items:
                          type: number
                      weather_code:
                        type: array
                        items:
                          type: number
                      snow_height:
                        type: array
                        items:
                          type: number
                      freezing_level_height:
                        type: array
                        items:
                          type: number
                      soil_temperature_0cm:
                        type: array
                        items:
                          type: number
                      soil_temperature_6cm:
                        type: array
                        items:
                          type: number
                      soil_temperature_18cm:
                        type: array
                        items:
                          type: number
                      soil_temperature_54cm:
                        type: array
                        items:
                          type: number
                      soil_moisture_0_1cm:
                        type: array
                        items:
                          type: number
                      soil_moisture_1_3cm:
                        type: array
                        items:
                          type: number
                      soil_moisture_3_9cm:
                        type: array
                        items:
                          type: number
                      soil_moisture_9_27cm:
                        type: array
                        items:
                          type: number
                      soil_moisture_27_81cm:
                        type: array
                        items:
                          type: number
                  DailyResponse:
                    type: object
                    properties:
                      time:
                        type: array
                        items:
                          type: string
                      temperature_2m_max:
                        type: array
                        items:
                          type: number
                      temperature_2m_min:
                        type: array
                        items:
                          type: number
                      apparent_temperature_max:
                        type: array
                        items:
                          type: number
                      apparent_temperature_min:
                        type: array
                        items:
                          type: number
                      precipitation_sum:
                        type: array
                        items:
                          type: number
                      precipitation_hours:
                        type: array
                        items:
                          type: number
                      weather_code:
                        type: array
                        items:
                          type: number
                      sunrise:
                        type: array
                        items:
                          type: number
                      sunset:
                        type: array
                        items:
                          type: number
                      wind_speed_10m_max:
                        type: array
                        items:
                          type: number
                      wind_gusts_10m_max:
                        type: array
                        items:
                          type: number
                      wind_direction_10m_dominant:
                        type: array
                        items:
                          type: number
                      shortwave_radiation_sum:
                        type: array
                        items:
                          type: number
                      uv_index_max:
                        type: array
                        items:
                          type: number
                      uv_index_clear_sky_max:
                        type: array
                        items:
                          type: number
                      et0_fao_evapotranspiration:
                        type: array
                        items:
                          type: number
                    required:
                      - time
                  CurrentWeather:
                    type: object
                    properties:
                      time:
                        type: string
                      temperature:
                        type: number
                      wind_speed:
                        type: number
                      wind_direction:
                        type: number
                      weather_code:
                        type: integer
                    required:
                      - time
                      - temperature
                      - wind_speed
                      - wind_direction
                      - weather_code
        - ActionGroupName: get-current-date-time-from-timezone
          Description: This tool will allow the agent to get the current date and time from a specific location provided by the human.
          ActionGroupExecutor: 
            Lambda: !GetAtt DateTime.Arn
          ApiSchema: 
            Payload: |
              {
                "openapi": "3.0.0",
                "info": {
                  "title": "Current Time API",
                  "version": "1.0.0"
                },
                "paths": {
                  "/getCurrentTime": {
                    "description": "This API will help you to get the current date and time for a specific time zone. Time zone can be obtained from location information such as City or Country",
                    "get": {
                      "operationId": "get_getCurrentTime",
                      "description": "Get current date and time for a specific timezone",
                      "parameters": [
                        {
                          "name": "timezone",
                          "in": "query",
                          "description": "Timezone for the location. The value for this parameter can be obtained from the geocoding api",
                          "required": false,
                          "schema": {
                            "type": "string",
                            "example": "UTC",
                            "default": "UTC"
                          }
                        }
                      ],
                      "responses": {
                        "200": {
                          "description": "Successful response",
                          "content": {
                            "application/json": {
                              "schema": {
                                "type": "object",
                                "properties": {
                                  "current_date_time": {
                                    "type": "string",
                                    "description": "Current date and time in the specified or default timezone"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "security": [] 
                    }
                  }
                }
              }
  GeoCoordinatesLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: BedrockAgent
    Properties:
      FunctionName: !Ref GeoCoordinates
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !GetAtt BedrockAgent.AgentArn
  
  WeatherLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: BedrockAgent
    Properties:
      FunctionName: !Ref Weather
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !GetAtt BedrockAgent.AgentArn
  
  DateTimeLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: BedrockAgent
    Properties:
      FunctionName: !Ref DateTime
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !GetAtt BedrockAgent.AgentArn

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: CognitoUserPoolforVirtualMeteorologistApp
      UsernameAttributes: []  
      UsernameConfiguration: 
        CaseSensitive: false
      AliasAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: false
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      UserPoolAddOns:
        AdvancedSecurityMode: ENFORCED

  TestUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Username: !Select [0, !Split ["@", !Ref UserEmail]]
      UserAttributes:
        - Name: email
          Value: !Ref UserEmail
      MessageAction: SUPPRESS

  SetUserPassword:
    Type: Custom::SetUserPassword
    DependsOn: 
      - TestUser
      - SetUserPasswordFunction
    Properties:
      ServiceToken: !GetAtt SetUserPasswordFunction.Arn
      UserPoolId: !Ref CognitoUserPool
      Username: !Select [0, !Split ["@", !Ref UserEmail]]
      Password: !Sub 'Z!-${AWS::StackName}-${AWS::Region}-${AWS::AccountId}'

  SetUserPasswordFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Handler: index.handler
      Role: !GetAtt SetUserPasswordRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def handler(event, context):
              if event['RequestType'] in ['Create', 'Update']:
                  client = boto3.client('cognito-idp')
                  try:
                      client.admin_set_user_password(
                          UserPoolId=event['ResourceProperties']['UserPoolId'],
                          Username=event['ResourceProperties']['Username'],
                          Password=event['ResourceProperties']['Password'],
                          Permanent=False
                      )
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  except Exception as e:
                      print(e)
                      cfnresponse.send(event, context, cfnresponse.FAILED, {})
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

  SetUserPasswordRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CognitoUserPoolAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: cognito-idp:AdminSetUserPassword
                Resource: !GetAtt CognitoUserPool.Arn

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: VirtualMeteorologistApp
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: cognito-identity-pool-vm
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders: 
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName

  CognitoIdentityPoolBedrockAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CognitoIdentityPool-BedrockAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: bedrock:InvokeAgent
            Resource: !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/${BedrockAgent}/TSTALIASID'

  CognitoIdentityPoolRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals: 
                'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      ManagedPolicyArns:
        - !Ref CognitoIdentityPoolBedrockAccessPolicy
      Policies:
        - PolicyName: cognito-identity-pool-iam-role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: '*'
  CognitoIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt CognitoIdentityPoolRole.Arn

Outputs:
  UserPoolId:
    Description: Amazon Cognito User Pool ID 
    Value: !Ref CognitoUserPool
  UserPoolClientId:
    Description: Amazon Cognito User Pool Client ID
    Value: !Ref UserPoolClient
  IdentityPoolId:
    Description: Amazon Cognito Identity Pool ID
    Value: !Ref CognitoIdentityPool
  BedrockAgentName:
    Description: Amazon Bedrock Agent Name
    Value: virtual-meteorologist
  BedrockAgentId:
    Description: Amazon Bedrock Agent ID
    Value: !Ref BedrockAgent
  BedrockAgentAliasId:
    Description: Amazon Bedrock Agent Alias ID
    Value: TSTALIASID
  AWSRegion:
    Description: AWS Region
    Value: !Ref 'AWS::Region'
  TestUserUsername:
    Description: Username for a Test User
    Value: !Select [0, !Split ["@", !Ref UserEmail]]
  TestUserPassword:
    Description: Password for User1 (Will need to change after first login)
    Value: !Sub 'Z!-${AWS::StackName}-${AWS::Region}-${AWS::AccountId}'